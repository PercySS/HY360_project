@startuml

title __CJ's Class Diagram__\n

  namespace com.mysql.cj {
    abstract class com.mysql.cj.AbstractQuery {
        + session : NativeSession
        # batchedArgs : List<Object>
        # cancelTimeoutLock : Lock
        # charEncoding : String
        # clearWarningsCalled : boolean
        # currentDb : String
        # fetchSize : int
        # lock : Lock
        # maxAllowedPacket : RuntimeProperty<Integer>
        # queryAttributesBindings : QueryAttributesBindings
        # resultSetType : Type
        # statementExecuting : AtomicBoolean
        # statementId : int
        # timeoutInMillis : long
        {static} ~ statementCounter : int
        - cancelStatus : CancelStatus
        - executeTime : long
        + AbstractQuery()
        + addBatch()
        + checkCancelTimeout()
        + clearBatchedArgs()
        + closeQuery()
        + getBatchedArgs()
        + getCancelTimeoutLock()
        + getCurrentDatabase()
        + getExecuteTime()
        + getId()
        + getQueryAttributesBindings()
        + getResultFetchSize()
        + getResultSetFactory()
        + getResultType()
        + getSession()
        + getStatementExecuting()
        + getTimeoutInMillis()
        + isClearWarningsCalled()
        + resetCancelledState()
        + setCancelStatus()
        + setClearWarningsCalled()
        + setCurrentDatabase()
        + setExecuteTime()
        + setResultFetchSize()
        + setResultType()
        + setTimeoutInMillis()
        + startQueryTimer()
        + statementBegins()
        + stopQueryTimer()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.CancelQueryTaskImpl {
        ~ caughtWhileCancelling : Throwable
        ~ queryTimeoutKillsConnection : boolean
        ~ queryToCancel : Query
        + CancelQueryTaskImpl()
        + cancel()
        + getCaughtWhileCancelling()
        + getQueryToCancel()
        + run()
        + setCaughtWhileCancelling()
        + setQueryToCancel()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.ClientPreparedQuery {
        # autoClosePStmtStreams : RuntimeProperty<Boolean>
        # batchCommandIndex : int
        # originalSql : String
        # parameterCount : int
        # queryBindings : QueryBindings
        # queryInfo : QueryInfo
        # useStreamLengthsInPrepStmts : RuntimeProperty<Boolean>
        + ClientPreparedQuery()
        + asSql()
        + checkNullOrEmptyQuery()
        + closeQuery()
        + computeBatchSize()
        + fillSendPacket()
        + getBatchCommandIndex()
        + getOriginalSql()
        + getParameterCount()
        + getQueryBindings()
        + getQueryInfo()
        + setBatchCommandIndex()
        + setOriginalSql()
        + setParameterCount()
        + setQueryBindings()
        + setQueryInfo()
        # computeMaxParameterSetSizeAndBatchSize()
    }
  }
  

  namespace com.mysql.cj {
    abstract class com.mysql.cj.CoreSession {
        {static} # NULL_LOGGER : Log
        # autoReconnect : RuntimeProperty<Boolean>
        # autoReconnectForPools : RuntimeProperty<Boolean>
        # cacheServerConfiguration : RuntimeProperty<Boolean>
        # characterEncoding : RuntimeProperty<String>
        # connectionCreationTimeMillis : long
        # disconnectOnExpiredPasswords : RuntimeProperty<Boolean>
        # exceptionInterceptor : ExceptionInterceptor
        # gatherPerfMetrics : RuntimeProperty<Boolean>
        # hostInfo : HostInfo
        # log : Log
        # maintainTimeStats : RuntimeProperty<Boolean>
        # messageBuilder : MessageBuilder<? extends Message>
        # propertySet : PropertySet
        # protocol : Protocol<? extends Message>
        # sessionMaxRows : int
        - eventSink : ProfilerEventHandler
        - lock : Lock
        - telemetryHandler : TelemetryHandler
        + CoreSession()
        + addListener()
        + changeUser()
        + forceClose()
        + getDataStoreMetadata()
        + getExceptionInterceptor()
        + getHostInfo()
        + getIdentifierQuoteString()
        + getLog()
        + getMessageBuilder()
        + getProfilerEventHandler()
        + getPropertySet()
        + getQueryComment()
        + getQueryTimingUnits()
        + getRemoteSocketAddress()
        + getServerSession()
        + getSessionLock()
        + getTelemetryHandler()
        + getThreadId()
        + isSSLEstablished()
        + isSetNeededForAutoCommitMode()
        + quit()
        + removeListener()
        + setExceptionInterceptor()
        + setQueryComment()
        + setTelemetryHandler()
        + versionMeetsMinimum()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.DataStoreMetadataImpl {
        - session : Session
        + DataStoreMetadataImpl()
        + getTableRowCount()
        + schemaExists()
        + tableExists()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.LicenseConfiguration {
        {static} + checkLicenseType()
        - LicenseConfiguration()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.MysqlxSession {
        + MysqlxSession()
        + MysqlxSession()
        + failedPreparingStatement()
        + freePreparedStatementId()
        + getNewPreparedStatementId()
        + getPort()
        + getProcessHost()
        + getProtocol()
        + isClosed()
        + query()
        + query()
        + queryAsync()
        + quit()
        + readyForPreparingStatements()
        + supportsPreparedStatements()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NativeCharsetSettings {
        + charsetNameToCollationIndex : Map<String, Integer>
        + charsetNameToJavaEncoding : Map<String, String>
        + charsetNameToMblen : Map<String, Integer>
        + collationIndexToCharsetName : Map<Integer, String>
        + collationIndexToCollationName : Map<Integer, String>
        + collationNameToCollationIndex : Map<String, Integer>
        + javaEncodingUcToCharsetName : Map<String, String>
        + multibyteEncodings : Set<String>
        # cacheServerConfiguration : RuntimeProperty<Boolean>
        # characterEncoding : RuntimeProperty<String>
        # characterSetResults : RuntimeProperty<String>
        # connectionCollation : RuntimeProperty<String>
        # passwordCharacterEncoding : RuntimeProperty<String>
        - commandBuilder : NativeMessageBuilder
        {static} - customCharsetNameToCollationIndexByUrl : Map<String, Map<String, Integer>>
        {static} - customCharsetNameToJavaEncodingByUrl : Map<String, Map<String, String>>
        {static} - customCharsetNameToMblenByUrl : Map<String, Map<String, Integer>>
        {static} - customCollationIndexToCharsetNameByUrl : Map<String, Map<Integer, String>>
        {static} - customCollationIndexToCollationNameByUrl : Map<String, Map<Integer, String>>
        {static} - customCollationNameToCollationIndexByUrl : Map<String, Map<String, Integer>>
        {static} - customJavaEncodingUcToCharsetNameByUrl : Map<String, Map<String, String>>
        {static} - customMultibyteEncodingsByUrl : Map<String, Set<String>>
        - errorMessageEncoding : String
        - metadataCollationIndex : int
        - metadataEncoding : String
        - platformDbCharsetMatches : boolean
        - requiresEscapingEncoder : boolean
        - serverSession : ServerSession
        - session : NativeSession
        - sessionCollationIndex : Integer
        + NativeCharsetSettings()
        + configurePostHandshake()
        + configurePreHandshake()
        + doesPlatformDbCharsetMatches()
        + getCollationIndexForCollationName()
        + getCollationIndexForJavaEncoding()
        + getCollationIndexForMysqlCharsetName()
        + getCollationNameForCollationIndex()
        + getErrorMessageEncoding()
        + getJavaEncodingForCollationIndex()
        + getJavaEncodingForCollationIndex()
        + getJavaEncodingForMysqlCharset()
        + getJavaEncodingForMysqlCharset()
        + getMaxBytesPerChar()
        + getMaxBytesPerChar()
        + getMetadataCollationIndex()
        + getMetadataEncoding()
        + getMysqlCharsetForJavaEncoding()
        + getMysqlCharsetNameForCollationIndex()
        + getPasswordCharacterEncoding()
        + getRequiresEscapingEncoder()
        + getServerDefaultCharset()
        + isImpermissibleCollation()
        + isMultibyteCharset()
        - buildCollationMapping()
        - characterSetNamesMatches()
        - checkForCharsetMismatch()
        - getCommandBuilder()
        - telemetryWrapSendCommand()
        - tryAndFixEncoding()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NativeQueryAttributesBindings {
        ~ session : Session
        {static} - DEFAULT_MYSQL_TYPES : Map<Class<?>, MysqlType>
        - bindAttributes : List<NativeQueryBindValue>
        + NativeQueryAttributesBindings()
        + clearAttributes()
        + containsAttribute()
        + getAttributeValue()
        + getCount()
        + removeAttribute()
        + runThroughAll()
        + setAttribute()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NativeQueryBindValue {
        + calendar : Calendar
        + value : Object
        # boundBeforeExecutionNum : long
        # escapeBytesIfNeeded : boolean
        # isLoadDataQuery : boolean
        # isNational : boolean
        # isNull : boolean
        # isSet : boolean
        # keepOrigNanos : boolean
        # scaleOrLength : long
        # targetType : MysqlType
        # valueEncoder : ValueEncoder
        ~ exceptionInterceptor : ExceptionInterceptor
        ~ protocol : Protocol<?>
        ~ pset : PropertySet
        ~ serverSession : ServerSession
        - field : Field
        - name : String
        + NativeQueryBindValue()
        + clone()
        + escapeBytesIfNeeded()
        + getBinaryLength()
        + getBoundBeforeExecutionNum()
        + getByteValue()
        + getCalendar()
        + getField()
        + getFieldType()
        + getMysqlType()
        + getName()
        + getScaleOrLength()
        + getString()
        + getTextLength()
        + getValue()
        + isNational()
        + isNull()
        + isSet()
        + isStream()
        + keepOrigNanos()
        + reset()
        + setBinding()
        + setCalendar()
        + setEscapeBytesIfNeeded()
        + setField()
        + setIsNational()
        + setKeepOrigNanos()
        + setMysqlType()
        + setName()
        + setNull()
        + setScaleOrLength()
        + writeAsBinary()
        + writeAsQueryAttribute()
        + writeAsText()
        # NativeQueryBindValue()
        - resetToType()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NativeQueryBindings {
        {static} - DEFAULT_MYSQL_TYPES : Map<Class<?>, MysqlType>
        - bindValueConstructor : Function<Session, BindValue>
        - bindValues : BindValue[]
        - columnDefinition : ColumnDefinition
        - isLoadDataQuery : boolean
        - longParameterSwitchDetected : boolean
        - numberOfExecutions : int
        - sendTypesToServer : AtomicBoolean
        - session : Session
        + NativeQueryBindings()
        + checkAllParametersSet()
        + checkParameterSet()
        + clearBindValues()
        + clone()
        + getBindValues()
        + getBinding()
        + getBytesRepresentation()
        + getNumberOfExecutions()
        + getSendTypesToServer()
        + isLongParameterSwitchDetected()
        + isNull()
        + setAsciiStream()
        + setBigDecimal()
        + setBigInteger()
        + setBinaryStream()
        + setBindValues()
        + setBlob()
        + setBoolean()
        + setByte()
        + setBytes()
        + setCharacterStream()
        + setClob()
        + setColumnDefinition()
        + setDate()
        + setDouble()
        + setFloat()
        + setFromBindValue()
        + setInt()
        + setLong()
        + setLongParameterSwitchDetected()
        + setNCharacterStream()
        + setNClob()
        + setNString()
        + setNull()
        + setNumberOfExecutions()
        + setObject()
        + setObject()
        + setShort()
        + setString()
        + setTime()
        + setTimestamp()
        # setSerializableObject()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NativeSession {
        {static} - SERVER_VERSION_STRING_VAR_NAME : String
        - cancelTimer : Timer
        - commandBuilder : NativeMessageBuilder
        - forceClosedReason : Throwable
        - isClosed : boolean
        - lastQueryFinishedTime : long
        - listeners : CopyOnWriteArrayList<WeakReference<SessionEventListener>>
        - needsPing : boolean
        - queryComment : String
        {static} - serialVersionUID : long
        - serverConfigCache : CacheAdapter<String, Map<String, String>>
        + NativeSession()
        + addListener()
        + checkClosed()
        + clearInputStream()
        + connect()
        + disableMultiQueries()
        + dumpPacketRingBuffer()
        + enableMultiQueries()
        + execSQL()
        + forceClose()
        + getCancelTimer()
        + getCommandCount()
        + getConnectionCreationTimeMillis()
        + getCurrentTimeNanosOrMillis()
        + getForceClosedReason()
        + getIdentifierQuoteString()
        + getIdleFor()
        + getLocalInfileInputStream()
        + getNetworkResources()
        + getProcessHost()
        + getProtocol()
        + getQueryComment()
        + getRemoteSocketAddress()
        + getSessionMaxRows()
        + getSharedSendPacket()
        + getSlowQueryThreshold()
        + getSocketTimeout()
        + hadWarnings()
        + invokeCleanupListeners()
        + invokeQueryInterceptorsPost()
        + invokeQueryInterceptorsPre()
        + isClosed()
        + isNeedsPing()
        + isSSLEstablished()
        + isServerLocal()
        + isSetNeededForAutoCommitMode()
        + loadServerVariables()
        + ping()
        + queryServerVariable()
        + quit()
        + removeListener()
        + resetSessionState()
        + setConnectionCreationTimeMillis()
        + setForceClosedReason()
        + setLocalInfileInputStream()
        + setNeedsPing()
        + setQueryComment()
        + setQueryInterceptors()
        + setSessionMaxRows()
        + setSessionVariables()
        + setSocketTimeout()
        + shouldIntercept()
        + shutdownServer()
        # invokeNormalCloseListeners()
        # invokeReconnectListeners()
        - createConfigCacheIfNeeded()
        - findProcessHost()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.NoSubInterceptorWrapper {
        - underlyingInterceptor : QueryInterceptor
        + NoSubInterceptorWrapper()
        + destroy()
        + executeTopLevelOnly()
        + getUnderlyingInterceptor()
        + init()
        + postProcess()
        + postProcess()
        + preProcess()
        + preProcess()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.ServerPreparedQuery {
        {static} + BLOB_STREAM_READ_BUF_SIZE : int
        {static} + OPEN_CURSOR_FLAG : byte
        {static} + PARAMETER_COUNT_AVAILABLE : byte
        # commandBuilder : NativeMessageBuilder
        # explainSlowQueries : RuntimeProperty<Boolean>
        # gatherPerfMetrics : boolean
        # logSlowQueries : boolean
        # profileSQL : boolean
        # queryWasSlow : boolean
        # slowQueryThresholdMillis : RuntimeProperty<Integer>
        # useCursorFetch : boolean
        - parameterFields : Field[]
        - resultFields : ColumnDefinition
        - serverStatementId : long
        - useAutoSlowLog : boolean
        + clearParameters()
        + closeQuery()
        + fillSendPacket()
        {static} + getInstance()
        + getParameterFields()
        + getResultFields()
        + getServerStatementId()
        + prepareExecutePacket()
        + readExecuteResult()
        + sendExecutePacket()
        + serverExecute()
        + serverPrepare()
        + serverResetStatement()
        + setParameterFields()
        + setResultFields()
        + setServerStatementId()
        + statementBegins()
        # ServerPreparedQuery()
        # computeMaxParameterSetSizeAndBatchSize()
        - serverLongData()
        - storeStreamOrReader()
        - truncateQueryToLog()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.ServerPreparedQueryTestcaseGenerator {
        + ServerPreparedQueryTestcaseGenerator()
        + closeQuery()
        + serverExecute()
        + serverPrepare()
        - dumpCloseForTestcase()
        - dumpExecuteForTestcase()
        - dumpPrepareForTestcase()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.SimpleQuery {
        + SimpleQuery()
    }
  }
  

  com.mysql.cj.AbstractQuery .up.|> com.mysql.cj.Query
  com.mysql.cj.CancelQueryTaskImpl .up.|> com.mysql.cj.CancelQueryTask
  com.mysql.cj.CancelQueryTaskImpl -up-|> java.util.TimerTask
  com.mysql.cj.ClientPreparedQuery .up.|> com.mysql.cj.PreparedQuery
  com.mysql.cj.ClientPreparedQuery -up-|> com.mysql.cj.AbstractQuery
  com.mysql.cj.CoreSession .up.|> com.mysql.cj.Session
  com.mysql.cj.DataStoreMetadataImpl .up.|> com.mysql.cj.DataStoreMetadata
  com.mysql.cj.MysqlxSession -up-|> com.mysql.cj.CoreSession
  com.mysql.cj.NativeCharsetSettings .up.|> com.mysql.cj.CharsetSettings
  com.mysql.cj.NativeCharsetSettings -up-|> com.mysql.cj.CharsetMapping
  com.mysql.cj.NativeQueryAttributesBindings .up.|> com.mysql.cj.QueryAttributesBindings
  com.mysql.cj.NativeQueryBindValue .up.|> com.mysql.cj.BindValue
  com.mysql.cj.NativeQueryBindings .up.|> com.mysql.cj.QueryBindings
  com.mysql.cj.NativeSession .up.|> java.io.Serializable
  com.mysql.cj.NativeSession -up-|> com.mysql.cj.CoreSession
  com.mysql.cj.NoSubInterceptorWrapper .up.|> com.mysql.cj.interceptors.QueryInterceptor
  com.mysql.cj.ServerPreparedQuery -up-|> com.mysql.cj.ClientPreparedQuery
  com.mysql.cj.ServerPreparedQueryTestcaseGenerator -up-|> com.mysql.cj.ServerPreparedQuery
  com.mysql.cj.SimpleQuery -up-|> com.mysql.cj.AbstractQuery


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
