@startuml

title __PROTOCOL's Class Diagram__\n

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.AuthenticationPlugin {
          + destroy()
          {abstract} + getProtocolPluginName()
          + init()
          + init()
          {abstract} + isReusable()
          {abstract} + nextAuthenticationStep()
          {abstract} + requiresConfidentiality()
          + reset()
          {abstract} + setAuthenticationParameters()
          + setSourceOfAuthData()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.AuthenticationProvider {
          {abstract} + changeUser()
          {abstract} + connect()
          {abstract} + init()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ColumnDefinition {
          {abstract} + buildIndexMapping()
          {abstract} + exportTo()
          {abstract} + findColumn()
          {abstract} + getColumnLabelToIndex()
          {abstract} + getColumnNameToIndex()
          {abstract} + getColumnToIndexCache()
          {abstract} + getFields()
          {abstract} + getFullColumnNameToIndex()
          {abstract} + hasBuiltIndexMapping()
          {abstract} + hasLargeFields()
          {abstract} + initializeFrom()
          {abstract} + setColumnLabelToIndex()
          {abstract} + setColumnNameToIndex()
          {abstract} + setColumnToIndexCache()
          {abstract} + setFields()
          {abstract} + setFullColumnNameToIndex()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.FullReadInputStream {
          + FullReadInputStream()
          + getUnderlyingStream()
          + readFully()
          + readFully()
          + skipFully()
          + skipLengthEncodedInteger()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.InternalDate {
          # day : int
          # month : int
          # year : int
          + InternalDate()
          + InternalDate()
          {static} + from()
          {static} + from()
          + getDay()
          + getMonth()
          + getYear()
          + isZero()
          + setDay()
          + setMonth()
          + setYear()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.InternalTime {
          - hours : int
          - minutes : int
          - nanos : int
          - negative : boolean
          - scale : int
          - seconds : int
          + InternalTime()
          + InternalTime()
          {static} + from()
          {static} + from()
          {static} + from()
          {static} + from()
          {static} + from()
          + getHours()
          + getMinutes()
          + getNanos()
          + getScale()
          + getSeconds()
          + isNegative()
          + isZero()
          + setHours()
          + setMinutes()
          + setNanos()
          + setNegative()
          + setScale()
          + setSeconds()
          + toString()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.InternalTimestamp {
          - hours : int
          - minutes : int
          - nanos : int
          - offset : int
          - scale : int
          - seconds : int
          + InternalTimestamp()
          + InternalTimestamp()
          {static} + from()
          {static} + from()
          {static} + from()
          {static} + from()
          {static} + from()
          + getHours()
          + getMinutes()
          + getNanos()
          + getOffset()
          + getScale()
          + getSeconds()
          + isZero()
          + setHours()
          + setMinutes()
          + setNanos()
          + setOffset()
          + setScale()
          + setSeconds()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Message {
          {abstract} + getByteBuffer()
          {abstract} + getPosition()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.MessageHeader {
          {abstract} + getBuffer()
          {abstract} + getMessageSequence()
          {abstract} + getMessageSize()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.MessageListener {
          {abstract} + error()
          + processMessage()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.MessageReader {
          + getMessageSequence()
          + probeHeader()
          + probeMessage()
          + pushMessageListener()
          {abstract} + readHeader()
          {abstract} + readMessage()
          + readMessage()
          + resetMessageSequence()
          + skipPacket()
          + start()
          + stopAfterNextMessage()
          + undecorate()
          + undecorateAll()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.MessageSender {
          + send()
          + send()
          + send()
          + setMaxAllowedPacket()
          + undecorate()
          + undecorateAll()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.NetworkResources {
          - mysqlConnection : Socket
          - mysqlInput : InputStream
          - mysqlOutput : OutputStream
          + NetworkResources()
          + forceClose()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.OutputStreamWatcher {
          {abstract} + streamClosed()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.PacketReceivedTimeHolder {
          + getLastPacketReceivedTime()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.PacketSentTimeHolder {
          + getLastPacketSentTime()
          + getPreviousPacketSentTime()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Protocol {
          {abstract} + afterHandshake()
          {abstract} + beforeHandshake()
          {abstract} + changeDatabase()
          {abstract} + changeUser()
          {abstract} + checkErrorMessage()
          {abstract} + close()
          {abstract} + configureTimeZone()
          {abstract} + connect()
          {abstract} + getAuthenticationProvider()
          {abstract} + getExceptionInterceptor()
          {abstract} + getLocalInfileInputStream()
          {abstract} + getMessageBuilder()
          {abstract} + getPacketReceivedTimeHolder()
          {abstract} + getPacketSentTimeHolder()
          {abstract} + getPropertySet()
          {abstract} + getQueryTimingUnits()
          {abstract} + getServerSession()
          {abstract} + getSocketConnection()
          {abstract} + getValueEncoderSupplier()
          {abstract} + init()
          {abstract} + initServerSession()
          {abstract} + negotiateSSLConnection()
          {abstract} + read()
          {abstract} + read()
          {abstract} + readMessage()
          {abstract} + readMetadata()
          {abstract} + readQueryResult()
          {abstract} + readServerCapabilities()
          {abstract} + reset()
          {abstract} + send()
          {abstract} + sendCommand()
          {abstract} + setLocalInfileInputStream()
          {abstract} + setPacketReceivedTimeHolder()
          {abstract} + setPacketSentTimeHolder()
          {abstract} + setPropertySet()
          {abstract} + versionMeetsMinimum()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Protocol.ProtocolEventHandler {
          {abstract} + addListener()
          {abstract} + invokeListeners()
          {abstract} + removeListener()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Protocol.ProtocolEventListener {
          {abstract} + handleEvent()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      enum EventType {
        SERVER_CLOSED_SESSION
        SERVER_SHUTDOWN
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ProtocolEntity {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ProtocolEntityFactory {
          + createFromMessage()
          + createFromProtocolEntity()
          + getFetchSize()
          + getResultSetConcurrency()
          + getResultSetType()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ProtocolEntityReader {
          + read()
          + read()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ResultBuilder {
          {abstract} + addProtocolEntity()
          {abstract} + build()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ResultStreamer {
          {abstract} + finishStreaming()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Resultset {
          {abstract} + clearNextResultset()
          {abstract} + getColumnDefinition()
          {abstract} + getNextResultset()
          {abstract} + getResultId()
          {abstract} + getRows()
          {abstract} + getServerInfo()
          {abstract} + getUpdateCount()
          {abstract} + getUpdateID()
          {abstract} + hasRows()
          {abstract} + initRowsWithMetadata()
          {abstract} + setColumnDefinition()
          {abstract} + setNextResultset()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      enum Concurrency {
        READ_ONLY
        UPDATABLE
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      enum Type {
        FORWARD_ONLY
        SCROLL_INSENSITIVE
        SCROLL_SENSITIVE
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ResultsetRow {
          + isBinaryEncoded()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ResultsetRows {
          + addRow()
          + afterLast()
          + beforeFirst()
          + beforeLast()
          + close()
          {abstract} + getMetadata()
          {abstract} + getOwner()
          {abstract} + isAfterLast()
          {abstract} + isBeforeFirst()
          + isDynamic()
          + isEmpty()
          + isFirst()
          + isLast()
          + moveRowRelative()
          + setCurrentRow()
          {abstract} + setMetadata()
          {abstract} + setOwner()
          {abstract} + wasEmpty()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ResultsetRowsOwner {
          {abstract} + closeOwner()
          {abstract} + getConnection()
          {abstract} + getLock()
          {abstract} + getOwnerFetchSize()
          {abstract} + getOwningQuery()
          {abstract} + getOwningStatementFetchSize()
          {abstract} + getOwningStatementMaxRows()
          {abstract} + getOwningStatementServerId()
          {abstract} + getPointOfOrigin()
          {abstract} + getSession()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ServerCapabilities {
          {abstract} + getCapabilityFlags()
          {abstract} + getServerDefaultCollationIndex()
          {abstract} + getServerVersion()
          {abstract} + getThreadId()
          {abstract} + serverSupportsFracSecs()
          {abstract} + setCapabilityFlags()
          {abstract} + setThreadId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ServerSession {
          {static} + TRANSACTION_COMPLETED : int
          {static} + TRANSACTION_IN_PROGRESS : int
          {static} + TRANSACTION_NOT_STARTED : int
          {static} + TRANSACTION_STARTED : int
          {abstract} + cursorExists()
          {abstract} + getCapabilities()
          {abstract} + getCharsetSettings()
          {abstract} + getClientParam()
          {abstract} + getDefaultTimeZone()
          + getServerSessionStateController()
          {abstract} + getServerVariable()
          {abstract} + getServerVariable()
          {abstract} + getServerVariables()
          {abstract} + getServerVersion()
          {abstract} + getSessionTimeZone()
          {abstract} + getStatusFlags()
          {abstract} + getTransactionState()
          {abstract} + hasLongColumnInfo()
          {abstract} + hasMoreResults()
          {abstract} + inTransactionOnServer()
          {abstract} + isAutoCommit()
          {abstract} + isAutocommit()
          {abstract} + isEOFDeprecated()
          {abstract} + isLastRowSent()
          {abstract} + isLowerCaseTableNames()
          {abstract} + isNoBackslashEscapesSet()
          {abstract} + isQueryCacheEnabled()
          {abstract} + isServerTruncatesFracSecs()
          {abstract} + isSessionStateTrackingEnabled()
          {abstract} + isVersion()
          {abstract} + noGoodIndexUsed()
          {abstract} + noIndexUsed()
          {abstract} + queryWasSlow()
          {abstract} + setAutoCommit()
          {abstract} + setCapabilities()
          {abstract} + setCharsetSettings()
          {abstract} + setClientParam()
          {abstract} + setServerVariables()
          {abstract} + setSessionTimeZone()
          {abstract} + setStatusFlags()
          {abstract} + setStatusFlags()
          {abstract} + storesLowerCaseTableNames()
          {abstract} + supportsQueryAttributes()
          {abstract} + useAnsiQuotedIdentifiers()
          {abstract} + useMultiResults()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ServerSessionStateController {
          {static} + SESSION_TRACK_GTIDS : int
          {static} + SESSION_TRACK_SCHEMA : int
          {static} + SESSION_TRACK_STATE_CHANGE : int
          {static} + SESSION_TRACK_SYSTEM_VARIABLES : int
          {static} + SESSION_TRACK_TRANSACTION_CHARACTERISTICS : int
          {static} + SESSION_TRACK_TRANSACTION_STATE : int
          + addSessionStateChangesListener()
          + getSessionStateChanges()
          + removeSessionStateChangesListener()
          + setSessionStateChanges()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ServerSessionStateController.ServerSessionStateChanges {
          {abstract} + getSessionStateChangesList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      class com.mysql.cj.protocol.ServerSessionStateController.SessionStateChange {
          - type : int
          - values : List<String>
          + SessionStateChange()
          + addValue()
          + getType()
          + getValues()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ServerSessionStateController.SessionStateChangesListener {
          {abstract} + handleSessionStateChanges()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.SocketConnection {
          {abstract} + connect()
          {abstract} + forceClose()
          {abstract} + getExceptionInterceptor()
          {abstract} + getHost()
          {abstract} + getMysqlInput()
          {abstract} + getMysqlOutput()
          {abstract} + getMysqlSocket()
          {abstract} + getNetworkResources()
          {abstract} + getPort()
          {abstract} + getPropertySet()
          {abstract} + getSocketFactory()
          {abstract} + isSSLEstablished()
          {abstract} + performTlsHandshake()
          + performTlsHandshake()
          {abstract} + setMysqlInput()
          {abstract} + setSocketFactory()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.SocketFactory {
          + afterHandshake()
          + beforeHandshake()
          {abstract} + connect()
          {abstract} + performTlsHandshake()
          + performTlsHandshake()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.SocketMetadata {
          + isLocallyConnected()
          + isLocallyConnected()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ValueDecoder {
          {abstract} + decodeBit()
          {abstract} + decodeByteArray()
          {abstract} + decodeDate()
          {abstract} + decodeDatetime()
          {abstract} + decodeDecimal()
          {abstract} + decodeDouble()
          {abstract} + decodeFloat()
          {abstract} + decodeInt1()
          {abstract} + decodeInt2()
          {abstract} + decodeInt4()
          {abstract} + decodeInt8()
          {abstract} + decodeSet()
          {abstract} + decodeTime()
          {abstract} + decodeTimestamp()
          {abstract} + decodeUInt1()
          {abstract} + decodeUInt2()
          {abstract} + decodeUInt4()
          {abstract} + decodeUInt8()
          {abstract} + decodeYear()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.ValueEncoder {
          {abstract} + encodeAsBinary()
          {abstract} + encodeAsQueryAttribute()
          {abstract} + encodeAsText()
          {abstract} + getBinaryLength()
          {abstract} + getBytes()
          {abstract} + getString()
          {abstract} + getTextLength()
          {abstract} + init()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.Warning {
          {abstract} + getCode()
          {abstract} + getLevel()
          {abstract} + getMessage()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace protocol {
      interface com.mysql.cj.protocol.WatchableStream {
          {abstract} + setWatcher()
          {abstract} + size()
          {abstract} + toByteArray()
          {abstract} + write()
      }
    }
  }
  

  com.mysql.cj.protocol.FullReadInputStream -up-|> java.io.FilterInputStream
  com.mysql.cj.protocol.InternalTimestamp -up-|> com.mysql.cj.protocol.InternalDate
  com.mysql.cj.protocol.Protocol +-down- com.mysql.cj.protocol.Protocol.ProtocolEventHandler
  com.mysql.cj.protocol.Protocol +-down- com.mysql.cj.protocol.Protocol.ProtocolEventListener
  com.mysql.cj.protocol.Protocol.ProtocolEventListener +-down- com.mysql.cj.protocol.Protocol.ProtocolEventListener.EventType
  com.mysql.cj.protocol.Resultset +-down- com.mysql.cj.protocol.Resultset.Concurrency
  com.mysql.cj.protocol.Resultset +-down- com.mysql.cj.protocol.Resultset.Type
  com.mysql.cj.protocol.ServerSessionStateController +-down- com.mysql.cj.protocol.ServerSessionStateController.ServerSessionStateChanges
  com.mysql.cj.protocol.ServerSessionStateController +-down- com.mysql.cj.protocol.ServerSessionStateController.SessionStateChange
  com.mysql.cj.protocol.ServerSessionStateController +-down- com.mysql.cj.protocol.ServerSessionStateController.SessionStateChangesListener


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
