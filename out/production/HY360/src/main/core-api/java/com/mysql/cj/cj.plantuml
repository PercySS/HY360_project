@startuml

title __CJ's Class Diagram__\n

  namespace com.mysql.cj {
    interface com.mysql.cj.BindValue {
        {abstract} + clone()
        {abstract} + escapeBytesIfNeeded()
        {abstract} + getBinaryLength()
        {abstract} + getBoundBeforeExecutionNum()
        {abstract} + getByteValue()
        {abstract} + getCalendar()
        {abstract} + getField()
        {abstract} + getFieldType()
        {abstract} + getMysqlType()
        {abstract} + getName()
        {abstract} + getScaleOrLength()
        {abstract} + getString()
        {abstract} + getTextLength()
        {abstract} + getValue()
        {abstract} + isNational()
        {abstract} + isNull()
        {abstract} + isSet()
        {abstract} + isStream()
        {abstract} + keepOrigNanos()
        {abstract} + reset()
        {abstract} + setBinding()
        {abstract} + setCalendar()
        {abstract} + setEscapeBytesIfNeeded()
        {abstract} + setField()
        {abstract} + setIsNational()
        {abstract} + setKeepOrigNanos()
        {abstract} + setMysqlType()
        {abstract} + setName()
        {abstract} + setNull()
        {abstract} + setScaleOrLength()
        {abstract} + writeAsBinary()
        {abstract} + writeAsQueryAttribute()
        {abstract} + writeAsText()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.CacheAdapter {
        {abstract} + get()
        {abstract} + invalidate()
        {abstract} + invalidateAll()
        {abstract} + invalidateAll()
        {abstract} + put()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.CacheAdapterFactory {
        {abstract} + getInstance()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.CancelQueryTask {
        {abstract} + cancel()
        {abstract} + getCaughtWhileCancelling()
        {abstract} + getQueryToCancel()
        {abstract} + setCaughtWhileCancelling()
        {abstract} + setQueryToCancel()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.CharsetMapping {
        {static} + MAP_SIZE : int
        {static} + MYSQL_CHARSET_NAME_armscii8 : String
        {static} + MYSQL_CHARSET_NAME_ascii : String
        {static} + MYSQL_CHARSET_NAME_big5 : String
        {static} + MYSQL_CHARSET_NAME_binary : String
        {static} + MYSQL_CHARSET_NAME_cp1250 : String
        {static} + MYSQL_CHARSET_NAME_cp1251 : String
        {static} + MYSQL_CHARSET_NAME_cp1256 : String
        {static} + MYSQL_CHARSET_NAME_cp1257 : String
        {static} + MYSQL_CHARSET_NAME_cp850 : String
        {static} + MYSQL_CHARSET_NAME_cp852 : String
        {static} + MYSQL_CHARSET_NAME_cp866 : String
        {static} + MYSQL_CHARSET_NAME_cp932 : String
        {static} + MYSQL_CHARSET_NAME_dec8 : String
        {static} + MYSQL_CHARSET_NAME_eucjpms : String
        {static} + MYSQL_CHARSET_NAME_euckr : String
        {static} + MYSQL_CHARSET_NAME_gb18030 : String
        {static} + MYSQL_CHARSET_NAME_gb2312 : String
        {static} + MYSQL_CHARSET_NAME_gbk : String
        {static} + MYSQL_CHARSET_NAME_geostd8 : String
        {static} + MYSQL_CHARSET_NAME_greek : String
        {static} + MYSQL_CHARSET_NAME_hebrew : String
        {static} + MYSQL_CHARSET_NAME_hp8 : String
        {static} + MYSQL_CHARSET_NAME_keybcs2 : String
        {static} + MYSQL_CHARSET_NAME_koi8r : String
        {static} + MYSQL_CHARSET_NAME_koi8u : String
        {static} + MYSQL_CHARSET_NAME_latin1 : String
        {static} + MYSQL_CHARSET_NAME_latin2 : String
        {static} + MYSQL_CHARSET_NAME_latin5 : String
        {static} + MYSQL_CHARSET_NAME_latin7 : String
        {static} + MYSQL_CHARSET_NAME_macce : String
        {static} + MYSQL_CHARSET_NAME_macroman : String
        {static} + MYSQL_CHARSET_NAME_sjis : String
        {static} + MYSQL_CHARSET_NAME_swe7 : String
        {static} + MYSQL_CHARSET_NAME_tis620 : String
        {static} + MYSQL_CHARSET_NAME_ucs2 : String
        {static} + MYSQL_CHARSET_NAME_ujis : String
        {static} + MYSQL_CHARSET_NAME_utf16 : String
        {static} + MYSQL_CHARSET_NAME_utf16le : String
        {static} + MYSQL_CHARSET_NAME_utf32 : String
        {static} + MYSQL_CHARSET_NAME_utf8 : String
        {static} + MYSQL_CHARSET_NAME_utf8mb3 : String
        {static} + MYSQL_CHARSET_NAME_utf8mb4 : String
        {static} + MYSQL_COLLATION_INDEX_binary : int
        {static} + MYSQL_COLLATION_INDEX_utf8mb4_0900_ai_ci : int
        {static} + MYSQL_COLLATION_INDEX_utf8mb4_general_ci : int
        {static} - CHARSET_NAME_TO_CHARSET : Map<String, MysqlCharset>
        {static} - CHARSET_NAME_TO_COLLATION_INDEX : Map<String, Integer>
        {static} - COLLATION_INDEX_TO_CHARSET : Map<Integer, MysqlCharset>
        {static} - COLLATION_INDEX_TO_COLLATION_NAME : String[]
        {static} - COLLATION_NAME_TO_COLLATION_INDEX : Map<String, Integer>
        {static} - IMPERMISSIBLE_INDEXES : Set<Integer>
        {static} - JAVA_ENCODING_UC_TO_MYSQL_CHARSET : Map<String, List<MysqlCharset>>
        {static} - MULTIBYTE_ENCODINGS : Set<String>
        {static} + getStaticCollationNameForCollationIndex()
        {static} + getStaticJavaEncodingForCollationIndex()
        {static} + getStaticMysqlCharsetNameForCollationIndex()
        {static} # getStaticCollationIndexForCollationName()
        {static} # getStaticCollationIndexForJavaEncoding()
        {static} # getStaticCollationIndexForMysqlCharsetName()
        {static} # getStaticJavaEncodingForCollationIndex()
        {static} # getStaticJavaEncodingForMysqlCharset()
        {static} # getStaticJavaEncodingForMysqlCharset()
        {static} # getStaticMblen()
        {static} # getStaticMysqlCharsetAliasesByName()
        {static} # getStaticMysqlCharsetByName()
        {static} # getStaticMysqlCharsetForJavaEncoding()
        {static} # isStaticImpermissibleCollation()
        {static} # isStaticMultibyteCharset()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.CharsetSettings {
        {static} + CHARACTER_SET_CLIENT : String
        {static} + CHARACTER_SET_CONNECTION : String
        {static} + CHARACTER_SET_RESULTS : String
        {static} + COLLATION_CONNECTION : String
        {abstract} + configurePostHandshake()
        {abstract} + configurePreHandshake()
        {abstract} + doesPlatformDbCharsetMatches()
        {abstract} + getCollationIndexForCollationName()
        {abstract} + getCollationIndexForJavaEncoding()
        {abstract} + getCollationIndexForMysqlCharsetName()
        {abstract} + getCollationNameForCollationIndex()
        {abstract} + getErrorMessageEncoding()
        {abstract} + getJavaEncodingForCollationIndex()
        {abstract} + getJavaEncodingForMysqlCharset()
        {abstract} + getMaxBytesPerChar()
        {abstract} + getMaxBytesPerChar()
        {abstract} + getMetadataCollationIndex()
        {abstract} + getMetadataEncoding()
        {abstract} + getMysqlCharsetForJavaEncoding()
        {abstract} + getMysqlCharsetNameForCollationIndex()
        {abstract} + getPasswordCharacterEncoding()
        {abstract} + getRequiresEscapingEncoder()
        {abstract} + isMultibyteCharset()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.Collation {
        + collationNames : String[]
        + index : int
        + priority : int
        + Collation()
        + Collation()
        + toString()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.Constants {
        {static} + BIG_DECIMAL_MAX_BYTE_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_DOUBLE_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_FLOAT_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_INTEGER_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_LONG_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_NEGATIVE_DOUBLE_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_NEGATIVE_FLOAT_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MAX_SHORT_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MIN_BYTE_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MIN_INTEGER_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MIN_LONG_VALUE : BigDecimal
        {static} + BIG_DECIMAL_MIN_SHORT_VALUE : BigDecimal
        {static} + BIG_DECIMAL_NEGATIVE_ONE : BigDecimal
        {static} + BIG_DECIMAL_ONE : BigDecimal
        {static} + BIG_DECIMAL_ZERO : BigDecimal
        {static} + BIG_INTEGER_MAX_BYTE_VALUE : BigInteger
        {static} + BIG_INTEGER_MAX_INTEGER_VALUE : BigInteger
        {static} + BIG_INTEGER_MAX_LONG_VALUE : BigInteger
        {static} + BIG_INTEGER_MAX_SHORT_VALUE : BigInteger
        {static} + BIG_INTEGER_MIN_BYTE_VALUE : BigInteger
        {static} + BIG_INTEGER_MIN_INTEGER_VALUE : BigInteger
        {static} + BIG_INTEGER_MIN_LONG_VALUE : BigInteger
        {static} + BIG_INTEGER_MIN_SHORT_VALUE : BigInteger
        {static} + BIG_INTEGER_NEGATIVE_ONE : BigInteger
        {static} + BIG_INTEGER_ONE : BigInteger
        {static} + BIG_INTEGER_ZERO : BigInteger
        {static} + CJ_FULL_NAME : String
        {static} + CJ_LICENSE : String
        {static} + CJ_MAJOR_VERSION : String
        {static} + CJ_MINOR_VERSION : String
        {static} + CJ_NAME : String
        {static} + CJ_REVISION : String
        {static} + CJ_VERSION : String
        {static} + EMPTY_BYTE_ARRAY : byte[]
        {static} + JVM_VENDOR : String
        {static} + JVM_VERSION : String
        {static} + MILLIS_I18N : String
        {static} + OS_ARCH : String
        {static} + OS_NAME : String
        {static} + OS_VERSION : String
        {static} + SLASH_STAR_SPACE_AS_BYTES : byte[]
        {static} + SPACE_STAR_SLASH_SPACE_AS_BYTES : byte[]
        {static} + UNSIGNED_BYTE_MAX_VALUE : int
        - Constants()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.DataStoreMetadata {
        {abstract} + getTableRowCount()
        {abstract} + schemaExists()
        {abstract} + tableExists()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.MessageBuilder {
        {abstract} + buildClose()
        {abstract} + buildComQuery()
        {abstract} + buildComQuery()
        {abstract} + buildSqlStatement()
        {abstract} + buildSqlStatement()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.Messages {
        {static} - BUNDLE_NAME : String
        {static} - RESOURCE_BUNDLE : ResourceBundle
        {static} - emptyObjectArray : Object[]
        {static} + getString()
        {static} + getString()
        - Messages()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.MysqlCharset {
        + aliases : List<String>
        + charsetName : String
        + javaEncodingsUc : List<String>
        + mblen : int
        + minimumVersion : ServerVersion
        + priority : int
        + MysqlCharset()
        + MysqlCharset()
        + MysqlCharset()
        + toString()
        ~ getMatchingJavaEncoding()
        ~ isOkayForVersion()
        - addEncodingMapping()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.MysqlConnection {
        {abstract} + checkClosed()
        {abstract} + cleanup()
        {abstract} + createNewIO()
        {abstract} + getConnectionLock()
        {abstract} + getExceptionInterceptor()
        {abstract} + getId()
        {abstract} + getProperties()
        {abstract} + getPropertySet()
        {abstract} + getServerSessionStateController()
        {abstract} + getSession()
        {abstract} + getURL()
        {abstract} + getUser()
    }
  }
  

  namespace com.mysql.cj {
    enum MysqlType {
      BIGINT
      BIGINT_UNSIGNED
      BINARY
      BIT
      BLOB
      BOOLEAN
      CHAR
      DATE
      DATETIME
      DECIMAL
      DECIMAL_UNSIGNED
      DOUBLE
      DOUBLE_UNSIGNED
      ENUM
      FIELD_FLAG_AUTO_INCREMENT
      FIELD_FLAG_BINARY
      FIELD_FLAG_BLOB
      FIELD_FLAG_MULTIPLE_KEY
      FIELD_FLAG_NOT_NULL
      FIELD_FLAG_PRIMARY_KEY
      FIELD_FLAG_UNIQUE_KEY
      FIELD_FLAG_UNSIGNED
      FIELD_FLAG_ZEROFILL
      FIELD_TYPE_BIT
      FIELD_TYPE_BLOB
      FIELD_TYPE_DATE
      FIELD_TYPE_DATETIME
      FIELD_TYPE_DECIMAL
      FIELD_TYPE_DOUBLE
      FIELD_TYPE_ENUM
      FIELD_TYPE_FLOAT
      FIELD_TYPE_GEOMETRY
      FIELD_TYPE_INT24
      FIELD_TYPE_JSON
      FIELD_TYPE_LONG
      FIELD_TYPE_LONGLONG
      FIELD_TYPE_LONG_BLOB
      FIELD_TYPE_MEDIUM_BLOB
      FIELD_TYPE_NEWDECIMAL
      FIELD_TYPE_NULL
      FIELD_TYPE_SET
      FIELD_TYPE_SHORT
      FIELD_TYPE_STRING
      FIELD_TYPE_TIME
      FIELD_TYPE_TIMESTAMP
      FIELD_TYPE_TINY
      FIELD_TYPE_TINY_BLOB
      FIELD_TYPE_VARCHAR
      FIELD_TYPE_VAR_STRING
      FIELD_TYPE_VECTOR
      FIELD_TYPE_YEAR
      FLOAT
      FLOAT_UNSIGNED
      GEOMETRY
      INT
      INT_UNSIGNED
      JSON
      LONGBLOB
      LONGTEXT
      MEDIUMBLOB
      MEDIUMINT
      MEDIUMINT_UNSIGNED
      MEDIUMTEXT
      NULL
      SET
      SMALLINT
      SMALLINT_UNSIGNED
      TEXT
      TIME
      TIMESTAMP
      TINYBLOB
      TINYINT
      TINYINT_UNSIGNED
      TINYTEXT
      UNKNOWN
      VARBINARY
      VARCHAR
      VECTOR
      YEAR
      javaClass
      jdbcType
      IS_DECIMAL
      IS_NOT_DECIMAL
      createParams
      flagsMask
      isDecimal
      name
      precision
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.PerConnectionLRUFactory {
        + getInstance()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.PerConnectionLRUFactory.PerConnectionLRU {
        - cache : LRUCache<String, QueryInfo>
        - cacheSqlLimit : int
        - lock : Lock
        + get()
        + invalidate()
        + invalidateAll()
        + invalidateAll()
        + put()
        # PerConnectionLRU()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.PingTarget {
        {abstract} + doPing()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.PreparedQuery {
        {abstract} + asSql()
        {abstract} + checkNullOrEmptyQuery()
        {abstract} + computeBatchSize()
        {abstract} + fillSendPacket()
        {abstract} + getBatchCommandIndex()
        {abstract} + getOriginalSql()
        {abstract} + getParameterCount()
        {abstract} + getQueryBindings()
        {abstract} + getQueryInfo()
        {abstract} + setBatchCommandIndex()
        {abstract} + setOriginalSql()
        {abstract} + setParameterCount()
        {abstract} + setQueryBindings()
        {abstract} + setQueryInfo()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.Query {
        {abstract} + addBatch()
        {abstract} + checkCancelTimeout()
        {abstract} + clearBatchedArgs()
        {abstract} + closeQuery()
        {abstract} + getBatchedArgs()
        {abstract} + getCancelTimeoutLock()
        {abstract} + getCurrentDatabase()
        {abstract} + getExecuteTime()
        {abstract} + getId()
        {abstract} + getQueryAttributesBindings()
        {abstract} + getResultFetchSize()
        {abstract} + getResultSetFactory()
        {abstract} + getResultType()
        {abstract} + getSession()
        {abstract} + getStatementExecuting()
        {abstract} + getTimeoutInMillis()
        {abstract} + isClearWarningsCalled()
        {abstract} + resetCancelledState()
        {abstract} + setCancelStatus()
        {abstract} + setClearWarningsCalled()
        {abstract} + setCurrentDatabase()
        {abstract} + setExecuteTime()
        {abstract} + setResultFetchSize()
        {abstract} + setResultType()
        {abstract} + setTimeoutInMillis()
        {abstract} + startQueryTimer()
        {abstract} + statementBegins()
        {abstract} + stopQueryTimer()
    }
  }
  

  namespace com.mysql.cj {
    enum CancelStatus {
      CANCELED_BY_TIMEOUT
      CANCELED_BY_USER
      NOT_CANCELED
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.QueryAttributesBindings {
        {abstract} + clearAttributes()
        {abstract} + containsAttribute()
        {abstract} + getAttributeValue()
        {abstract} + getCount()
        {abstract} + removeAttribute()
        {abstract} + runThroughAll()
        {abstract} + setAttribute()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.QueryBindings {
        {abstract} + checkAllParametersSet()
        {abstract} + checkParameterSet()
        {abstract} + clearBindValues()
        {abstract} + clone()
        {abstract} + getBindValues()
        {abstract} + getBinding()
        {abstract} + getBytesRepresentation()
        {abstract} + getNumberOfExecutions()
        {abstract} + getSendTypesToServer()
        {abstract} + isLongParameterSwitchDetected()
        {abstract} + isNull()
        {abstract} + setAsciiStream()
        {abstract} + setBigDecimal()
        {abstract} + setBigInteger()
        {abstract} + setBinaryStream()
        {abstract} + setBindValues()
        {abstract} + setBlob()
        {abstract} + setBoolean()
        {abstract} + setByte()
        {abstract} + setBytes()
        {abstract} + setCharacterStream()
        {abstract} + setClob()
        {abstract} + setColumnDefinition()
        {abstract} + setDate()
        {abstract} + setDouble()
        {abstract} + setFloat()
        {abstract} + setFromBindValue()
        {abstract} + setInt()
        {abstract} + setLong()
        {abstract} + setLongParameterSwitchDetected()
        {abstract} + setNCharacterStream()
        {abstract} + setNClob()
        {abstract} + setNString()
        {abstract} + setNull()
        {abstract} + setNumberOfExecutions()
        {abstract} + setObject()
        {abstract} + setObject()
        {abstract} + setShort()
        {abstract} + setString()
        {abstract} + setTime()
        {abstract} + setTimestamp()
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.QueryInfo {
        {static} - AS_CLAUSE : String
        {static} - CLOSING_MARKERS : String
        {static} - INSERT_STATEMENT : String
        {static} - LAST_INSERT_ID_FUNC : String
        {static} - MULTIPLE_QUERIES_TAG : String
        {static} - ODKU_CLAUSE : String[]
        {static} - OPENING_MARKERS : String
        {static} - OVERRIDING_MARKERS : String
        {static} - REPLACE_STATEMENT : String
        {static} - VALUE_CLAUSE : String
        - batchCount : int
        - containsOnDuplicateKeyUpdate : boolean
        - encoding : String
        - isRewritableWithMultiValuesClause : boolean
        - numberOfPlaceholders : int
        - numberOfQueries : int
        - queryLength : int
        - queryReturnType : QueryReturnType
        - queryStartPos : int
        - sql : String
        - statementFirstChar : char
        - statementKeyword : String
        - staticSqlParts : byte[][]
        - valuesClauseLength : int
        - valuesEndpoints : ArrayList<Integer>
        + QueryInfo()
        + containsOnDuplicateKeyUpdate()
        {static} + containsOnDuplicateKeyUpdateClause()
        {static} + firstCharOfStatementUc()
        + getFirstStmtChar()
        + getNumberOfQueries()
        + getQueryInfoForBatch()
        + getQueryReturnType()
        {static} + getQueryReturnType()
        + getSqlForBatch()
        + getSqlForBatch()
        + getStatementKeyword()
        {static} + getStatementKeyword()
        + getStaticSqlParts()
        + getValuesClauseLength()
        {static} + indexOfStatementKeyword()
        {static} + isReadOnlySafeQuery()
        + isRewritableWithMultiValuesClause()
        - QueryInfo()
        {static} - getContextForWithStatement()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.QueryResult {
    }
  }
  

  namespace com.mysql.cj {
    enum QueryReturnType {
      DOES_NOT_PRODUCE_RESULT_SET
      MAY_PRODUCE_RESULT_SET
      NONE
      PRODUCES_RESULT_SET
    }
  }
  

  namespace com.mysql.cj {
    class com.mysql.cj.ServerVersion {
        - completeVersion : String
        - major : Integer
        - minor : Integer
        - subminor : Integer
        + ServerVersion()
        + ServerVersion()
        + compareTo()
        + equals()
        + getMajor()
        + getMinor()
        + getSubminor()
        + hashCode()
        + meetsMinimum()
        {static} + parseVersion()
        + toString()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.Session {
        {abstract} + addListener()
        {abstract} + changeUser()
        {abstract} + forceClose()
        {abstract} + getDataStoreMetadata()
        {abstract} + getExceptionInterceptor()
        {abstract} + getHostInfo()
        {abstract} + getIdentifierQuoteString()
        {abstract} + getLog()
        {abstract} + getMessageBuilder()
        {abstract} + getProcessHost()
        {abstract} + getProfilerEventHandler()
        {abstract} + getPropertySet()
        {abstract} + getQueryComment()
        {abstract} + getQueryTimingUnits()
        {abstract} + getRemoteSocketAddress()
        {abstract} + getServerSession()
        {abstract} + getSessionLock()
        {abstract} + getTelemetryHandler()
        {abstract} + getThreadId()
        {abstract} + isClosed()
        {abstract} + isSSLEstablished()
        {abstract} + isSetNeededForAutoCommitMode()
        + query()
        + query()
        + queryAsync()
        {abstract} + quit()
        {abstract} + removeListener()
        {abstract} + setExceptionInterceptor()
        {abstract} + setQueryComment()
        {abstract} + setTelemetryHandler()
        {abstract} + versionMeetsMinimum()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.Session.SessionEventListener {
        {abstract} + handleCleanup()
        {abstract} + handleNormalClose()
        {abstract} + handleReconnect()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.TransactionEventHandler {
        {abstract} + transactionBegun()
        {abstract} + transactionCompleted()
    }
  }
  

  namespace com.mysql.cj {
    interface com.mysql.cj.WarningListener {
        {abstract} + warningEncountered()
    }
  }
  

  com.mysql.cj.Collation o-- com.mysql.cj.MysqlCharset : mysqlCharset
  com.mysql.cj.MysqlType .up.|> java.sql.SQLType
  com.mysql.cj.PerConnectionLRUFactory .up.|> com.mysql.cj.CacheAdapterFactory
  com.mysql.cj.PerConnectionLRUFactory +-down- com.mysql.cj.PerConnectionLRUFactory.PerConnectionLRU
  com.mysql.cj.PerConnectionLRUFactory.PerConnectionLRU .up.|> com.mysql.cj.CacheAdapter
  com.mysql.cj.Query +-down- com.mysql.cj.Query.CancelStatus
  com.mysql.cj.QueryInfo o-- com.mysql.cj.QueryInfo : baseQueryInfo
  com.mysql.cj.ServerVersion .up.|> java.lang.Comparable
  com.mysql.cj.Session +-down- com.mysql.cj.Session.SessionEventListener


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
