@startuml

title __TELEMETRY's Class Diagram__\n

  namespace com.mysql.cj {
    namespace telemetry {
      class com.mysql.cj.telemetry.NoopTelemetryHandler {
          {static} - INSTANCE : NoopTelemetryHandler
          {static} + getInstance()
          + startSpan()
          - NoopTelemetryHandler()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      class com.mysql.cj.telemetry.NoopTelemetryScope {
          {static} - INSTANCE : NoopTelemetryScope
          {static} + getInstance()
          - NoopTelemetryScope()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      class com.mysql.cj.telemetry.NoopTelemetrySpan {
          {static} - INSTANCE : NoopTelemetrySpan
          {static} + getInstance()
          + makeCurrent()
          - NoopTelemetrySpan()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      enum TelemetryAttribute {
        DB_CONNECTION_STRING
        DB_NAME
        DB_OPERATION
        DB_STATEMENT
        DB_SYSTEM
        DB_SYSTEM_DEFAULT
        DB_USER
        NETWORK_PEER_ADDRESS
        NETWORK_PEER_PORT
        NETWORK_TRANSPORT
        NETWORK_TRANSPORT_PIPE
        NETWORK_TRANSPORT_TCP
        NETWORK_TRANSPORT_UNIX
        OPERATION_BATCH
        OPERATION_COMMIT
        OPERATION_CREATE
        OPERATION_EXPLAIN
        OPERATION_INIT_DB
        OPERATION_KILL
        OPERATION_PING
        OPERATION_ROLLBACK
        OPERATION_SELECT
        OPERATION_SET
        OPERATION_SHOW
        OPERATION_SHUTDOWN
        OPERATION_USE
        SERVER_ADDRESS
        SERVER_PORT
        STATEMENT_SUFFIX
        THREAD_ID
        THREAD_NAME
        key
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      interface com.mysql.cj.telemetry.TelemetryHandler {
          + addLinkTarget()
          + getContextPropagationKey()
          + propagateContext()
          + removeLinkTarget()
          {abstract} + startSpan()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      interface com.mysql.cj.telemetry.TelemetryScope {
          + close()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      interface com.mysql.cj.telemetry.TelemetrySpan {
          + close()
          + end()
          {abstract} + makeCurrent()
          + setAttribute()
          + setAttribute()
          + setError()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace telemetry {
      enum TelemetrySpanName {
        CANCEL_QUERY
        CHANGE_DATABASE
        COMMIT
        CONNECTION_CREATE
        CONNECTION_RESET
        CREATE_DATABASE
        EXPLAIN_QUERY
        GET_INNODB_STATUS
        GET_PROCESS_HOST
        GET_VARIABLE
        LOAD_COLLATIONS
        LOAD_VARIABLES
        PING
        ROLLBACK
        ROUTINE_EXECUTE
        ROUTINE_EXECUTE_BATCH
        ROUTINE_PREPARE
        SET_CHARSET
        SET_OPTION_MULTI_STATEMENTS
        SET_TRANSACTION_ACCESS_MODE
        SET_TRANSACTION_ISOLATION
        SET_VARIABLE
        SET_VARIABLES
        SHOW_WARNINGS
        SHUTDOWN
        STMT_DEALLOCATE_PREPARED
        STMT_EXECUTE
        STMT_EXECUTE_BATCH
        STMT_EXECUTE_BATCH_PREPARED
        STMT_EXECUTE_PREPARED
        STMT_FETCH_PREPARED
        STMT_PREPARE
        STMT_RESET_PREPARED
        STMT_SEND_LONG_DATA
        USE_DATABASE
        name
      }
    }
  }
  

  com.mysql.cj.telemetry.NoopTelemetryHandler .up.|> com.mysql.cj.telemetry.TelemetryHandler
  com.mysql.cj.telemetry.NoopTelemetryScope .up.|> com.mysql.cj.telemetry.TelemetryScope
  com.mysql.cj.telemetry.NoopTelemetrySpan .up.|> com.mysql.cj.telemetry.TelemetrySpan


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
