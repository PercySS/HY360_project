@startuml

title __TESTSUITE's Class Diagram__\n

  namespace testsuite {
    class testsuite.BaseQueryInterceptor {
        + destroy()
        + executeTopLevelOnly()
        + init()
        + postProcess()
        + preProcess()
    }
  }
  

  namespace testsuite {
    abstract class testsuite.BaseTestCase {
        {static} + dbUrl : String
        {static} + timeZoneFreeDbUrl : String
        # conn : Connection
        # dbClass : String
        # dbName : String
        # isOpenSSL : boolean
        {static} # mainConnectionUrl : ConnectionUrl
        # pstmt : PreparedStatement
        # rs : ResultSet
        # serverVersion : ServerVersion
        # stmt : Statement
        - createdObjects : List<String[]>
        {static} - instanceCount : int
        - isOnCSFS : boolean
        - myInstanceNumber : int
        - mysqlRunningLocally : Boolean
        + BaseTestCase()
        + getConnectionWithProps()
        + getConnectionWithProps()
        + logDebug()
        + setUpBase()
        + tearDownBase()
        + versionMeetsMinimum()
        # appendRequiredProperties()
        # assertByteArrayEquals()
        {static} # assertConnectionsHistory()
        # assertEqualsFSAware()
        {static} # assertNonSecureConnection()
        # assertResultSetLength()
        # assertResultSetsEqual()
        {static} # assertSecureConnection()
        {static} # assertSecureConnection()
        # assertSessionStatusEquals()
        {static} # assertThrows()
        {static} # assertThrows()
        {static} # assertThrows()
        {static} # assertThrows()
        # cleanupTempFiles()
        # createDatabase()
        # createDatabase()
        # createFunction()
        # createFunction()
        # createProcedure()
        # createProcedure()
        # createSchemaObject()
        # createSchemaObject()
        # createTable()
        # createTable()
        # createTable()
        # createTable()
        # createUser()
        # createUser()
        # createView()
        # createView()
        {static} # currentTimeMillis()
        # dropDatabase()
        # dropDatabase()
        # dropFunction()
        # dropFunction()
        # dropProcedure()
        # dropProcedure()
        # dropSchemaObject()
        # dropSchemaObject()
        # dropTable()
        # dropTable()
        # dropUser()
        # dropUser()
        # dropView()
        # dropView()
        # fillPrimitiveDefaults()
        # getConnectionWithProps()
        # getConnectionWithProps()
        # getEncodedHostFromTestsuiteUrl()
        # getEncodedHostPortPairFromTestsuiteUrl()
        # getFailoverConnection()
        # getFailoverConnection()
        # getHighestCommonTlsVersion()
        # getHostFreePropertiesFromTestsuiteUrl()
        # getHostFreePropertiesFromTestsuiteUrl()
        # getHostFromTestsuiteUrl()
        # getInstanceNumber()
        # getLoadBalancedConnection()
        # getLoadBalancedConnection()
        # getLoadBalancedConnection()
        # getMysqlVariable()
        # getMysqlVariable()
        # getNewConnection()
        # getNoDbUrl()
        # getPort()
        # getPortFreeHostname()
        # getPortFromTestsuiteUrl()
        # getPropertiesFromTestsuiteUrl()
        # getPropertiesFromUrl()
        # getRowCount()
        # getSingleIndexedValueWithQuery()
        # getSingleIndexedValueWithQuery()
        # getSingleValue()
        # getSingleValueWithQuery()
        # getSourceReplicaReplicationConnection()
        # getSourceReplicaReplicationConnection()
        # getSourceReplicaUrl()
        # getSourceReplicaUrl()
        # getUnreliableFailoverConnection()
        # getUnreliableFailoverConnection()
        # getUnreliableLoadBalancedConnection()
        # getUnreliableLoadBalancedConnection()
        # getUnreliableMultiHostConnection()
        # getUnreliableReplicationConnection()
        # getUnreliableReplicationConnection()
        # getUnreliableReplicationConnection()
        # isClassAvailable()
        # isCommunityEdition()
        # isEnterpriseEdition()
        # isMysqlRunningLocally()
        # isPluginActive()
        # isRunningOnJRockit()
        # isServerRunningOnWindows()
        # isSysPropDefined()
        # newTempBinaryFile()
        # randomString()
        # removeHostRelatedProps()
        # removeSqlMode()
        # runLongTests()
        # supportsLoadLocalInfile()
        # supportsMysqlNativePassword()
        # supportsTLSv1_2()
        # supportsTestCachingSha2PasswordKeys()
        # supportsTestCertificates()
        # supportsTestSha256PasswordKeys()
        # supportsTimeZoneNames()
        # versionMeetsMinimum()
        - sanitizeDbName()
    }
  }
  

  namespace testsuite {
    class testsuite.BaseTestCase.MockConnectionConfiguration {
        ~ hostName : String
        ~ isDowned : boolean
        ~ port : String
        ~ serverType : String
        + MockConnectionConfiguration()
        + getAddress()
        + getAddress()
        + getHostPortPair()
    }
  }
  

  namespace testsuite {
    class testsuite.BufferingLogger {
        {static} - bufferedLog : StringBuffer
        + BufferingLogger()
        + BufferingLogger()
        {static} + dropBuffer()
        {static} + getBuffer()
        {static} + startLoggingToBuffer()
        # logInternal()
    }
  }
  

  namespace testsuite {
    class testsuite.InjectedSocketFactory {
        {static} + injectedBuffer : byte[]
        {static} # injectedBufferPos : int
        {static} ~ IMMEDIATELY_DOWNED_HOSTS_PORT : Set<String>
        - hi : HostInfo
        - propSet : PropertySet
        + connect()
        {static} + dontDownHost()
        {static} + downHost()
        {static} + flushAllStaticData()
    }
  }
  

  namespace testsuite {
    class testsuite.InjectedSocketFactory.InjectedInputStream {
        ~ hi : HostInfo
        ~ loopCount : int
        ~ propSet : PropertySet
        ~ underlyingInputStream : InputStream
        + available()
        + close()
        + mark()
        + markSupported()
        + read()
        + read()
        + read()
        + reset()
        + skip()
        ~ InjectedInputStream()
    }
  }
  

  namespace testsuite {
    class testsuite.InjectedSocketFactory.SocketWrapper {
        ~ hi : HostInfo
        ~ propSet : PropertySet
        ~ underlyingSocket : Socket
        + bind()
        + close()
        + getChannel()
        + getInetAddress()
        + getInputStream()
        + getKeepAlive()
        + getLocalAddress()
        + getLocalPort()
        + getLocalSocketAddress()
        + getOOBInline()
        + getOutputStream()
        + getPort()
        + getReceiveBufferSize()
        + getRemoteSocketAddress()
        + getReuseAddress()
        + getSendBufferSize()
        + getSoLinger()
        + getSoTimeout()
        + getTcpNoDelay()
        + getTrafficClass()
        + isBound()
        + isClosed()
        + isConnected()
        + isInputShutdown()
        + isOutputShutdown()
        + sendUrgentData()
        + setKeepAlive()
        + setOOBInline()
        + setReceiveBufferSize()
        + setReuseAddress()
        + setSendBufferSize()
        + setSoLinger()
        + setSoTimeout()
        + setTcpNoDelay()
        + setTrafficClass()
        + shutdownInput()
        + shutdownOutput()
        + toString()
        ~ SocketWrapper()
    }
  }
  

  namespace testsuite {
    class testsuite.JUnitSummary {
        ~ out : PrintStream
        - numAbortedInTestSet : AtomicInteger
        - numFailedInTestSet : AtomicInteger
        - numSkippedInTestSet : AtomicInteger
        - numSucceededInTestSet : AtomicInteger
        - testSetStartTime : Instant
        + JUnitSummary()
        + executionFinished()
        + executionSkipped()
        + executionStarted()
        - println()
        - resetCountsForNewTestSet()
    }
  }
  

  namespace testsuite {
    class testsuite.MockJndiContextFactory {
        + getInitialContext()
    }
  }
  

  namespace testsuite {
    class testsuite.MockJndiContextFactory.MockJndiContext {
        - data : HashMap<String, byte[]>
        + addToEnvironment()
        + bind()
        + bind()
        + close()
        + composeName()
        + composeName()
        + createSubcontext()
        + createSubcontext()
        + destroySubcontext()
        + destroySubcontext()
        + getEnvironment()
        + getNameInNamespace()
        + getNameParser()
        + getNameParser()
        + list()
        + list()
        + listBindings()
        + listBindings()
        + lookup()
        + lookup()
        + lookupLink()
        + lookupLink()
        + rebind()
        + rebind()
        + removeFromEnvironment()
        + rename()
        + rename()
        + unbind()
        + unbind()
    }
  }
  

  namespace testsuite {
    class testsuite.MockJndiContextFactory.MockJndiName {
        - data : String
        {static} - serialVersionUID : long
        + add()
        + add()
        + addAll()
        + addAll()
        + clone()
        + compareTo()
        + endsWith()
        + get()
        + getAll()
        + getPrefix()
        + getSuffix()
        + isEmpty()
        + remove()
        + size()
        + startsWith()
    }
  }
  

  namespace testsuite {
    class testsuite.MockJndiContextFactory.MockJndiNameParser {
        + parse()
    }
  }
  

  namespace testsuite {
    class testsuite.TestUtils {
        {static} + encodePercent()
        {static} + getIpv6List()
        {static} + getIpv6List()
        {static} + serverListening()
        {static} + serverListening()
    }
  }
  

  namespace testsuite {
    class testsuite.UnreliableSocketFactory {
        {static} + DEFAULT_TIMEOUT_MILLIS : long
        {static} + STATUS_CONNECTED : String
        {static} + STATUS_FAILED : String
        {static} + STATUS_UNKNOWN : String
        {static} ~ CONNECTION_ATTEMPTS : List<String>
        {static} ~ HUNG_CONNECT_HOSTS : Set<String>
        {static} ~ HUNG_READ_HOSTS : Set<String>
        {static} ~ HUNG_WRITE_HOSTS : Set<String>
        {static} ~ IMMEDIATELY_DOWNED_HOSTS : Set<String>
        {static} - MAPPED_HOSTS : Map<String, String>
        - hostname : String
        - portNumber : int
        - propSet : PropertySet
        + connect()
        {static} + dontDownHost()
        {static} + dontHangOnConnect()
        {static} + dontHangOnRead()
        {static} + dontHangOnWrite()
        {static} + downHost()
        {static} + flushAllStaticData()
        {static} + flushConnectionAttempts()
        {static} + getHostConnectedStatus()
        {static} + getHostFailedStatus()
        {static} + getHostFromLastConnection()
        {static} + getHostFromPastConnection()
        {static} + getHostUnknownStatus()
        {static} + getHostsFromAllConnections()
        {static} + getHostsFromLastConnections()
        {static} + hangOnConnect()
        {static} + hangOnRead()
        {static} + hangOnWrite()
        {static} + isConnected()
        {static} + mapHost()
        {static} ~ sleepMillisForProperty()
        - getNewSocket()
    }
  }
  

  namespace testsuite {
    class testsuite.UnreliableSocketFactory.HangingInputStream {
        ~ aliasedHostname : String
        ~ propSet : PropertySet
        ~ underlyingInputStream : InputStream
        + available()
        + close()
        + mark()
        + markSupported()
        + read()
        + read()
        + read()
        + reset()
        + skip()
        ~ HangingInputStream()
        - failIfRequired()
    }
  }
  

  namespace testsuite {
    class testsuite.UnreliableSocketFactory.HangingOutputStream {
        ~ aliasedHostname : String
        ~ propSet : PropertySet
        ~ underlyingOutputStream : OutputStream
        + close()
        + flush()
        + write()
        + write()
        + write()
        ~ HangingOutputStream()
        - failIfRequired()
    }
  }
  

  namespace testsuite {
    class testsuite.UnreliableSocketFactory.HangingSocket {
        ~ aliasedHostname : String
        ~ propSet : PropertySet
        ~ underlyingSocket : Socket
        + bind()
        + close()
        + getChannel()
        + getInetAddress()
        + getInputStream()
        + getKeepAlive()
        + getLocalAddress()
        + getLocalPort()
        + getLocalSocketAddress()
        + getOOBInline()
        + getOutputStream()
        + getPort()
        + getReceiveBufferSize()
        + getRemoteSocketAddress()
        + getReuseAddress()
        + getSendBufferSize()
        + getSoLinger()
        + getSoTimeout()
        + getTcpNoDelay()
        + getTrafficClass()
        + isBound()
        + isClosed()
        + isConnected()
        + isInputShutdown()
        + isOutputShutdown()
        + sendUrgentData()
        + setKeepAlive()
        + setOOBInline()
        + setReceiveBufferSize()
        + setReuseAddress()
        + setSendBufferSize()
        + setSoLinger()
        + setSoTimeout()
        + setTcpNoDelay()
        + setTrafficClass()
        + shutdownInput()
        + shutdownOutput()
        + toString()
        ~ HangingSocket()
    }
  }
  

  testsuite.BaseQueryInterceptor .up.|> com.mysql.cj.interceptors.QueryInterceptor
  testsuite.BaseTestCase +-down- testsuite.BaseTestCase.MockConnectionConfiguration
  testsuite.BufferingLogger -up-|> com.mysql.cj.log.StandardLogger
  testsuite.InjectedSocketFactory -up-|> com.mysql.cj.protocol.StandardSocketFactory
  testsuite.InjectedSocketFactory +-down- testsuite.InjectedSocketFactory.InjectedInputStream
  testsuite.InjectedSocketFactory +-down- testsuite.InjectedSocketFactory.SocketWrapper
  testsuite.InjectedSocketFactory.InjectedInputStream -up-|> java.io.InputStream
  testsuite.InjectedSocketFactory.SocketWrapper -up-|> java.net.Socket
  testsuite.JUnitSummary .up.|> TestExecutionListener
  testsuite.MockJndiContextFactory .up.|> javax.naming.spi.InitialContextFactory
  testsuite.MockJndiContextFactory +-down- testsuite.MockJndiContextFactory.MockJndiContext
  testsuite.MockJndiContextFactory +-down- testsuite.MockJndiContextFactory.MockJndiName
  testsuite.MockJndiContextFactory +-down- testsuite.MockJndiContextFactory.MockJndiNameParser
  testsuite.MockJndiContextFactory.MockJndiContext .up.|> javax.naming.Context
  testsuite.MockJndiContextFactory.MockJndiName .up.|> javax.naming.Name
  testsuite.MockJndiContextFactory.MockJndiNameParser .up.|> javax.naming.NameParser
  testsuite.UnreliableSocketFactory -up-|> com.mysql.cj.protocol.StandardSocketFactory
  testsuite.UnreliableSocketFactory +-down- testsuite.UnreliableSocketFactory.HangingInputStream
  testsuite.UnreliableSocketFactory +-down- testsuite.UnreliableSocketFactory.HangingOutputStream
  testsuite.UnreliableSocketFactory +-down- testsuite.UnreliableSocketFactory.HangingSocket
  testsuite.UnreliableSocketFactory.HangingInputStream -up-|> java.io.InputStream
  testsuite.UnreliableSocketFactory.HangingOutputStream -up-|> java.io.OutputStream
  testsuite.UnreliableSocketFactory.HangingSocket -up-|> java.net.Socket


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
